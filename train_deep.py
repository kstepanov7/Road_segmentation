# -*- coding: utf-8 -*-
"""train_deep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tb-k_ImUTEZIkrVDV_mpNDaXEyV_IwCA
"""

import torch
import torch.nn as nn
from Road_segmentation.models.metrics import calc_iou

import time
import wandb
import logging
logging.propagate = False 
logging.getLogger().setLevel(logging.ERROR)


def run_epoch(model, optimizer, criterion, dataloader, device, epoch, tr = 0.55, mode = 'train'):

    if mode == 'train':
      model.train(True)
    else:
      model.train(False)

    is_train = (mode == 'train')
    epoch_loss, epoch_iou = 0.0, 0.0
    with torch.set_grad_enabled(is_train):

        for image, mask in dataloader:
            image, mask = image.to(device), mask.to(device)
            mask = mask[:,0].view(-1, 1, 512, 512)

            pred = model(image)
            loss = criterion(pred, mask)
            
            if is_train:
                optimizer.zero_grad()
                loss.backward()
                optimizer.step()

            loss = loss.detach().cpu().numpy()
            pred = pred.sigmoid().detach().cpu().numpy()
            mask = mask.detach().cpu().numpy()

            epoch_loss += loss
            epoch_iou += calc_iou(pred, mask, tr = tr)
            
    return epoch_loss / len(dataloader), epoch_iou / len(dataloader)

def train(model, optimizer, criterion, train_loader, val_loader, device, n_epochs = 50, scheduler=None, project_name = 'Ottawa', run_name = None, tr = 0.55):
    
    if run_name == None:
        run_name = time.ctime(time.time())
    wandb.init(project = project_name, name = run_name)
    
    start = time.time()
    for epoch in range(n_epochs):

        train_loss, train_iou = run_epoch(model, optimizer, criterion, train_loader, device, epoch, tr = tr, mode = 'train')
        val_loss, val_iou = run_epoch(model, None, criterion, val_loader, device, epoch, tr = tr, mode = 'val')

        train_val_time = time.time() - start
        wandb.log({
            "Train loss" : train_loss,
            "Train IoU": train_iou,
            "Validation loss" : val_loss,
            "Validation IoU": val_iou
            }
        )

      
        if scheduler is not None:
            scheduler.step()
            
        if epoch % 5 == 0:
            print('Epoch:', epoch)
            print('iou_train:', train_iou, 'iou_val:', val_iou)
            print('loss_train:', train_loss, 'loss_val:', val_loss)
            print('time:', train_val_time)
            print('-'*60)
