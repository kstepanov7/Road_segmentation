# -*- coding: utf-8 -*-
"""dataset_wrapper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kmNE1NIutSdTKTYE7nELvQxGhkZ9T4WN
"""

import os
import torch
import torch.utils.data as utils_data

from PIL import Image, ImageOps
import numpy as np
import random
import skimage
from skimage import io

#https://pytorch.org/tutorials/beginner/data_loading_tutorial.html
class Create_Dataset(utils_data.Dataset):

    def __init__(self, images_dir, masks_dir, transform=None, test=False, img_size=256):

        self.images_dir = images_dir
        self.masks_dir = masks_dir
        self.transform = transform
        self.images_titles = sorted(os.listdir(self.images_dir))
        self.masks_titles = sorted(os.listdir(self.masks_dir))
        self.test = test
        self.img_size = img_size
        
    def __len__(self):
        return len(self.images_titles)
    
    def __getitem__(self, idx):

        images = Image.open(os.path.join(self.images_dir, self.images_titles[idx]))
        images = images.resize((self.img_size,self.img_size),Image.ANTIALIAS)
        seed = random.randint(0, 100)
        random.seed(seed)
        torch.manual_seed(seed)
        images = self.transform(images)

        if self.test:
          return images
        
        masks = Image.open(os.path.join(self.masks_dir, self.masks_titles[idx]))
        masks = masks.resize((self.img_size,self.img_size),Image.ANTIALIAS)
        masks = ImageOps.invert(masks)
        random.seed(seed)
        torch.manual_seed(seed)

        masks = self.transform(masks)

        return images, masks
